"""
тесты для встроенных функций filter, map, sorted, а также для функций из библиотеки math: pi, sqrt, pow, hypot.
"""
import math
import pytest

# Тесты для filter

"""Проверяем, что функция filter корректно отбирает четные числа из диапазона от 0 до 9. 
Ожидаемый результат: [0, 2, 4, 6, 8]."""
def test_filter_even_numbers():
    result = list(filter(lambda x: x % 2 == 0, range(10)))
    assert result == [0, 2, 4, 6, 8]


"""Проверяем, что функция filter правильно фильтрует числа, которые меньше или равны нулю, из списка [1, -2, 3, 0, -1]. 
Ожидаемый результат: [-2, 0, -1]."""
def test_filter_non_positive_numbers():
    result = list(filter(lambda x: x <= 0, [1, -2, 3, 0, -1]))
    assert result == [-2, 0, -1]


"""Проверяем, что функция filter корректно отбирает строки, содержащие букву 'a', из списка ['apple', 'banana', 'cherry', 'date']. 
Ожидаемый результат: ['apple', 'banana', 'date']."""
def test_filter_strings():
    result = list(filter(lambda x: 'a' in x, ['apple', 'banana', 'cherry', 'date']))
    assert result == ['apple', 'banana', 'date']


"""Проверяем, что если фильтровать пустой список, результат будет тоже пустым списком. Ожидаемый результат: []."""
def test_filter_empty():
    result = list(filter(lambda x: x > 5, []))
    assert result == []


"""Проверяем случай, когда ни один элемент не соответствует условию. В данном случае мы фильтруем числа, большие 5, из списка [1, 2, 3, 4]. 
Ожидаемый результат: []."""
def test_filter_no_match():
    result = list(filter(lambda x: x > 5, [1, 2, 3, 4]))
    assert result == []

"""Проверяем, что если все элементы удовлетворяют условию, то результат будет равен исходному списку. 
Ожидаемый результат: [1, 2, 3, 4, 5, 6, 7, 8, 9]."""
def test_filter_all_match():
    result = list(filter(lambda x: x < 10, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
    assert result == [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Тесты для map

"""Проверяем, что функция map корректно возводит числа в квадрат для списка [1, 2, 3, 4]. 
Ожидаемый результат: [1, 4, 9, 16]"""
def test_map_square_numbers():
    result = list(map(lambda x: x**2, [1, 2, 3, 4]))
    assert result == [1, 4, 9, 16]

"""Проверяем, что функция map правильно преобразует все строки в верхний регистр в списке ['a', 'b', 'c']. 
Ожидаемый результат: ['A', 'B', 'C']"""
def test_map_strings_to_upper():
    result = list(map(lambda x: x.upper(), ['a', 'b', 'c']))
    assert result == ['A', 'B', 'C']

"""Проверяем, что функция map корректно суммирует элементы двух списков [1, 2, 3] и [4, 5, 6]. 
Ожидаемый результат: [5, 7, 9]."""
def test_map_addition():
    result = list(map(lambda x, y: x + y, [1, 2, 3], [4, 5, 6]))
    assert result == [5, 7, 9]

"""Проверяем, что если входной список пуст, результат будет тоже пустым. 
Ожидаемый результат: []."""
def test_map_empty():
    result = list(map(lambda x: x * 2, []))
    assert result == []

"""Проверяем, что функция map корректно конвертирует строки в числа с помощью функции int. Входной список — ['1', '2', '3']. 
Ожидаемый результат: [1, 2, 3]"""
def test_map_no_function():
    result = list(map(int, ['1', '2', '3']))
    assert result == [1, 2, 3]


# Тесты для sorted

"""Проверяем, что функция sorted правильно сортирует числа в списке [4, 2, 3, 1, 5] по возрастанию. 
Ожидаемый результат: [1, 2, 3, 4, 5]."""
def test_sorted_numbers():
    result = sorted([4, 2, 3, 1, 5])
    assert result == [1, 2, 3, 4, 5]

"""Проверяем, что функция sorted корректно сортирует числа по убыванию, если передан параметр reverse=True. 
Ожидаемый результат: [5, 4, 3, 2, 1]"""
def test_sorted_reverse():
    result = sorted([4, 2, 3, 1, 5], reverse=True)
    assert result == [5, 4, 3, 2, 1]

"""Проверяем, что функция sorted корректно сортирует строки по алфавиту в списке ['banana', 'apple', 'cherry', 'date']. 
Ожидаемый результат: ['apple', 'banana', 'cherry', 'date']."""
def test_sorted_strings():
    result = sorted(['banana', 'apple', 'cherry', 'date'])
    assert result == ['apple', 'banana', 'cherry', 'date']

"""Проверяем, что функция sorted правильно сортирует строки по длине с помощью ключа key=len. 
Ожидаемый результат: ['apple', 'date', 'banana', 'cherry']."""
def test_sorted_with_key():
    result = sorted(['banana', 'apple', 'cherry', 'date'], key=len)
    assert result == ['date', 'apple', 'banana', 'cherry']

"""если нужно использовать несколько критериев сортировки:
сначала отсортировать по длине, а затем по алфавиту, используем кортежи в качестве ключа сортировки
Ожидаемый результат:  ['date', 'apple', 'banana', 'cherry']
"""
def test_sorted_with_multy_key():
    result = sorted(['banana', 'apple', 'cherry', 'date'], key=lambda x: (len(x), x))
    assert result == ['date', 'apple', 'banana', 'cherry']

"""Проверяем, что сортировка пустого списка вернет пустой список. 
Ожидаемый результат: []."""
def test_sorted_empty():
    result = sorted([])
    assert result == []

"""Проверяем, что функция sorted сортирует строки с числами как строки, а не как числа. 
Например, строка '10' должна быть после строки '2', но перед строкой '3'. 
Ожидаемый результат: ['1', '10', '2', '3']."""
def test_sorted_numeric_strings():
    result = sorted(['1', '2', '10', '3'])
    assert result == ['1', '10', '2', '3']

# Тесты для функций из библиотеки math
# math.pi
# Константа pi из модуля math — это значение числа Пи.

"""Проверяем, что значение числа Пи (math.pi) примерно равно 3.141592653589793. 
Используем pytest.approx, чтобы проверить, что оно лежит в пределах допустимой погрешности. 
Ожидаемый результат: значение pi должно быть близким к этому числу с точностью до 9 знаков после запятой."""
def test_pi_value():
    assert math.pi == pytest.approx(3.141592653589793, rel=1e-9)


"""Проверяем, что math.pi является типом float. 
Ожидаемый результат: math.pi должен быть типа float."""
def test_pi_type():
    assert isinstance(math.pi, float)


"""Проверяем, что число Пи лежит в пределах от 3.14 до 3.15. 
Ожидаемый результат: значение math.pi должно быть в этом диапазоне."""
def test_pi_range():
    assert 3.14 < math.pi < 3.15

# math.sqrt
# Функция sqrt(x) возвращает квадратный корень из числа.

"""Проверяем, что функция math.sqrt(9) возвращает правильный результат, равный 3. 
Ожидаемый результат: 3."""
def test_sqrt_positive():
    assert math.sqrt(9) == 3

"""Проверяем, что квадратный корень из нуля равен нулю. 
Ожидаемый результат: 0."""
def test_sqrt_zero():
    assert math.sqrt(0) == 0

"""Проверяем, что попытка вычислить квадратный корень из отрицательного числа вызывает ошибку ValueError, так как функция sqrt не поддерживает отрицательные числа. 
Ожидаемый результат: возбуждение исключения ValueError."""
def test_sqrt_negative():
    with pytest.raises(ValueError):
        math.sqrt(-1)


"""Проверяем, что функция sqrt корректно вычисляет квадратный корень для числа, не являющегося целым (например, для 2). 
Ожидаемый результат: результат должен быть примерно равен 1.4142135623730951."""
def test_sqrt_non_integer():
    assert math.sqrt(2) == pytest.approx(1.4142135623730951, rel=1e-9)

# math.pow
# Функция pow(x, y) возвращает x в степени y.

"""Проверяем, что функция pow(2, 3) возвращает правильный результат — 8. 
Ожидаемый результат: 8."""
def test_pow_positive():
    assert math.pow(2, 3) == 8

"""Проверяем, что любое число в степени ноль равно 1. В данном случае pow(3, 0) должно быть равно 1. 
Ожидаемый результат: 1."""
def test_pow_zero_exponent():
    assert math.pow(3, 0) == 1


"""Проверяем, что функция pow(-2, 3) корректно вычисляет отрицательное число в нечетной степени, в данном случае — -8. 
Ожидаемый результат: -8"""
def test_pow_negative_base():
    assert math.pow(-2, 3) == -8

"""Проверяем, что функция pow(16, 0.5) правильно вычисляет квадратный корень из 16, который равен 4. 
Ожидаемый результат: 4."""
def test_pow_fractional_exponent():
    assert math.pow(16, 0.5) == 4

"""Проверяем, что любое число в степени больше нуля, когда основание равно нулю, дает результат 0. 
Ожидаемый результат: 0."""
def test_pow_zero_base():
    assert math.pow(0, 5) == 0

# math.hypot
# Функция hypot(x, y) вычисляет гипотенузу прямоугольного треугольника по его катетам x и y.

"""Проверяем, что гипотенуза прямоугольного треугольника с катетами 3 и 4 равна 5. 
Ожидаемый результат: 5."""
def test_hypot_positive_values():
    assert math.hypot(3, 4) == 5

"""Проверяем, что гипотенуза треугольника с катетами 0 и 0 равна 0. 
Ожидаемый результат: 0."""
def test_hypot_zero_values():
    assert math.hypot(0, 0) == 0

"""Проверяем, что гипотенуза с катетами -3 и -4 (отрицательные значения) все равно возвращает результат, равный 5, так как гипотенуза не зависит от знака. 
Ожидаемый результат: 5."""
def test_hypot_negative_values():
    assert math.hypot(-3, -4) == 5

"""Проверяем, что гипотенуза для катетов 0.6 и 0.8 равна 1. 
Ожидаемый результат: 1."""
def test_hypot_fractional_values():
    assert math.hypot(0.6, 0.8) == 1.0

"""Проверяем, что гипотенуза для больших значений катетов 1000000 и 1000000 вычисляется корректно, результат должен быть примерно равен 1414213.562. 
Ожидаемый результат: примерно 1414213.562."""
def test_hypot_large_values():
    assert math.hypot(1000000, 1000000) == pytest.approx(1414213.562, rel=1e-5)

